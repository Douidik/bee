// std/vec.bee
mem :: #import "std/mem.bee"

new :: fn (T!, cap: s64) -> &[T!] {
    return &[mem.heap(#size(T!) * cap); cap; 0]
}

from :: fn (T!, source: &[T!]) -> &[T!] {
    vec : new(T! : T!, source.len())
    mem.copy(vec, source, vec.len())
    return vec
}

push :: fn (T!, $: &[T!], item: &T!) -> &T! {
    if len() + 1 > cap() {
    }
}

expand :: fn (T!, $: &[T!], cap: u64) -> u64 {
    if cap > cap {
        return $.cap
    }
    vec : new(T!: T!, 
}

// main.bee
vec :: #import "std/vec.bee"

main :: fn (argc : u32, argv : [&[char]]) -> u32 {
    ints: vec.new(T!: s32, 0)
}